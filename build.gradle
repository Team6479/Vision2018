// Do not mess with the following 6 lines
plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.2'
  id "eclipse"
  id 'org.hidetake.ssh' version '2.9.0'
}

apply plugin: 'java'
apply plugin: 'application'

//install the wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

// Uncomment the line below to build for an armhf device such as a Jetson or a Beaglebone Black
ext.buildType = "aarch64"

// Change the line below if you change the name of your main Java class
mainClassName = 'Main'
// Change the line below to change the name of the output jar
def projectName = 'Vision2018'

apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
    maven {
      url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
  //compile cscoreDep()
  //compile 'org.opencv:opencv-java:3.1.0'
  compile files('lib/opencv-340.jar')
}

jar {
  baseName = projectName
}

shadowJar {
  baseName = projectName
}

distributions {
  main {
    baseName = projectName
    contents {
      from (openCvUnzipLocation) {
        exclude 'META-INF'
        exclude '**/MANIFEST.MF'
        into 'bin/'
      }
    }
  }
}

def outputDirectory = file("${rootDir}/output")

task writeExecuteScript() {
  dependsOn jar
  doLast {
      def runFile = new File("${buildDir}/run${projectName}.sh")
      runFile.write "java -Djava.library.path=/usr/lib -jar ${projectName}-all.jar"
  }
}

task copyToOutput(type: Copy) {
  dependsOn shadowJar
  dependsOn unzipOpenCv
  dependsOn writeExecuteScript
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
    from (file("${buildDir}/run${projectName}.sh")) {
    }
}

task zipOutput(type: Zip) {
  baseName = projectName
  duplicatesStrategy = 'exclude'
  dependsOn shadowJar
  dependsOn unzipOpenCv
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (openCvUnzipLocation) {
    exclude 'META-INF'
    exclude '**/MANIFEST.MF'
  }
    from (file("${buildDir}/run${projectName}.sh")) {
      fileMode 0777
    }
}

distZip.dependsOn unzipOpenCv
distTar.dependsOn unzipOpenCv

applicationDefaultJvmArgs = ["-Djava.library.path=${openCvUnzipLocation}"]

build.dependsOn copyToOutput
build.dependsOn zipOutput
run.dependsOn unzipOpenCv


remotes {
  jetson {
    //host = '10.64.79.74'
    host = '192.168.1.2'
    user = 'nvidia'
    password = 'nvidia'
  }
}

task deploy {
	dependsOn copyToOutput
  doLast {
    ssh.run {
      session(remotes.jetson) {
      	put from: "${outputDirectory}", into: '.'
      }
    }
  }
}

clean {
    delete outputDirectory
}
