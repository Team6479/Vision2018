// Do not mess with the following 6 lines
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id 'eclipse'
    id 'idea'
    id 'org.hidetake.ssh' version '2.9.0'
    id 'java'
    id 'application'
    id "com.google.protobuf" version "0.8.3"
}

//apply plugin: 'java'
//apply plugin: 'application'

//install the wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

// Change the line below if you change the name of your main Java class
mainClassName = 'Main'
// Change the line below to change the name of the output jar
def projectName = 'Vision2018'


repositories {
    mavenCentral()
    maven {
      url "http://first.wpi.edu/FRC/roborio/maven/release"
    }
}

dependencies {
    //compile cscoreDep()
    compile files('lib/opencv-340.jar')
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
}

jar {
  baseName = projectName
}

shadowJar {
  baseName = projectName
}

distributions {
  main {
    baseName = projectName
  }
}

def outputDirectory = file("${rootDir}/output")

task writeExecuteScript() {
  dependsOn jar
  doLast {
      def runFile = new File("${buildDir}/run${projectName}.sh")
      runFile.write "java -Djava.library.path=`pwd`/ -jar ${projectName}-all.jar"
  }
}

task copyToOutput(type: Copy) {
  dependsOn shadowJar
  dependsOn writeExecuteScript
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (file("${buildDir}/run${projectName}.sh")) {
  }
  from (file("lib/libopencv_java340.so")) {
  }

}

task zipOutput(type: Zip) {
  baseName = projectName
  duplicatesStrategy = 'exclude'
  dependsOn shadowJar
  destinationDir = outputDirectory
  from (file(shadowJar.archivePath)) {
  }
  from (file("${buildDir}/run${projectName}.sh")) {
      fileMode 0777
  }
  from (file("lib/libopencv_java340.so")) {
  }
}

build {
    dependsOn copyToOutput
    dependsOn zipOutput
}


remotes {
  jetson {
    host = '10.64.79.74'
    user = 'nvidia'
    password = 'nvidia'
  }
}

task deploy {
	dependsOn build
  doLast {
    ssh.run {
      session(remotes.jetson) {
      //copy over
      	put from: "${outputDirectory}/${projectName}.zip", into: 'VisionCode2018/'
      	
      	def zipLoc = "VisionCode2018/${projectName}.zip"
      	
      	def execCMD = "unzip ${zipLoc} -d VisionCode2018/"
      	
      	//unzip
      	def result = execute execCMD
      }
    }
  }
}


clean {
    delete outputDirectory
}

task remoteClean {
        doLast {
    ssh.run {
      session(remotes.jetson) {
      	
      	def contents = "VisionCode2018/*"
      	
      	def execCMD = "rm ${contents}"
      	
      	//unzip
      	def result = execute execCMD
      }
    }
  } 
         
 }

